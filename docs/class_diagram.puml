@startuml Streamlink Dashboard Class Diagram

!define ENTITY(name,desc) class name as "desc" << (E,#E1F5FE) >>
!define SERVICE(name,desc) class name as "desc" << (S,#FFF3E0) >>
!define MODULE(name,desc) class name as "desc" << (M,#F3E5F5) >>

title Streamlink Dashboard - Domain Class Diagram

' Core Domain Entities
ENTITY(User, "User") {
    - id: int
    - username: str
    - password_hash: str
    - is_admin: bool
    - is_active: bool
    - created_at: datetime
    - last_login: datetime
    - updated_at: datetime
}

ENTITY(PlatformConfig, "PlatformConfig") {
    - id: int
    - platform: str
    - stream_url_pattern: str
    - quality_options: str
    - default_quality: str
    - additional_settings: dict
    - enabled: bool
    - created_at: datetime
    - updated_at: datetime
}

ENTITY(SystemConfig, "SystemConfig") {
    - id: int
    - config_key: str
    - config_value: str
    - description: str
    - created_at: datetime
    - updated_at: datetime
}

ENTITY(RotationPolicy, "RotationPolicy") {
    - id: int
    - name: str
    - policy_type: str
    - max_age_days: int
    - max_count: int
    - max_size_gb: int
    - enabled: bool
    - priority: int
    - created_at: datetime
    - updated_at: datetime
    --
    + should_delete(recording: Recording): bool
    + get_cleanup_candidates(): list
}

ENTITY(RecordingSchedule, "RecordingSchedule") {
    - id: int
    - platform: str
    - streamer_id: str
    - streamer_name: str
    - quality: str
    - custom_arguments: str
    - rotation_policy_id: int
    - enabled: bool
    - created_at: datetime
    - updated_at: datetime
    --
    + is_active(): bool
    + get_next_recording_time(): datetime
    + get_output_filename(): str
}

ENTITY(Recording, "Recording") {
    - id: int
    - schedule_id: int
    - file_path: str
    - file_name: str
    - file_size: int
    - start_time: datetime
    - end_time: datetime
    - duration: int
    - platform: str
    - streamer_id: str
    - streamer_name: str
    - quality: str
    - status: str
    - is_favorite: bool
    - created_at: datetime
    - updated_at: datetime
    --
    + is_protected(): bool
    + get_duration(): int
    + mark_as_favorite(): void
    + unmark_favorite(): void
}

ENTITY(RecordingJob, "RecordingJob") {
    - id: int
    - schedule_id: int
    - status: str
    - start_time: datetime
    - end_time: datetime
    - error_message: str
    - created_at: datetime
    - updated_at: datetime
    --
    + is_running(): bool
    + is_completed(): bool
    + is_failed(): bool
    + get_duration(): int
}

' Services
SERVICE(PlatformService, "PlatformService") {
    - db: AsyncSession
    - _strategies_cache: dict
    --
    + get_platform_config(platform: str): PlatformConfig
    + get_strategy(platform: str): PlatformStrategy
    + get_streamlink_args(platform: str, streamer_id: str, quality: str): list
    + validate_stream_url(platform: str, streamer_id: str): bool
}

SERVICE(StreamlinkService, "StreamlinkService") {
    - db: AsyncSession
    - platform_service: PlatformService
    - _active_recordings: dict
    --
    + start_recording(recording_id: int, platform: str, streamer_id: str, quality: str, output_path: str): bool
    + stop_recording(recording_id: int): bool
    + get_recording_status(recording_id: int): str
    + get_available_qualities(platform: str, streamer_id: str): list
}

SERVICE(SchedulerService, "SchedulerService") {
    - db: AsyncSession
    - platform_service: PlatformService
    - streamlink_service: StreamlinkService
    - _running: bool
    - _monitoring_tasks: dict
    - _monitoring_interval: int
    --
    + start(): void
    + stop(): void
    + add_schedule(schedule: RecordingSchedule): void
    + remove_schedule(schedule_id: int): void
    + update_schedule(schedule: RecordingSchedule): void
    + get_job_status(job_id: int): str
}

' Authentication Module
MODULE(AuthModule, "AuthModule") {
    + authenticate_user(credentials: HTTPBasicCredentials, db: AsyncSession): User
    + get_current_user(current_user: User): User
    + verify_password(password: str, hash: str): bool
}

' Database Module
MODULE(DatabaseModule, "DatabaseModule") {
    + get_db(): AsyncGenerator[AsyncSession, None]
    + init_db(): void
    + close_db(): void
}

' Relationships
User ||--o{ RecordingSchedule : manages
PlatformConfig ||--o{ RecordingSchedule : configures
SystemConfig ||--o{ RecordingSchedule : configures
RotationPolicy ||--o{ RecordingSchedule : applies_to
RecordingSchedule ||--o{ Recording : produces
RecordingSchedule ||--o{ RecordingJob : executes

PlatformService --> PlatformConfig : manages
StreamlinkService --> PlatformService : uses
StreamlinkService --> Recording : manages
SchedulerService --> RecordingSchedule : manages
SchedulerService --> RecordingJob : tracks
SchedulerService --> PlatformService : uses
SchedulerService --> StreamlinkService : uses

AuthModule --> User : manages
DatabaseModule --> User : manages
DatabaseModule --> PlatformConfig : manages
DatabaseModule --> SystemConfig : manages
DatabaseModule --> RotationPolicy : manages
DatabaseModule --> RecordingSchedule : manages
DatabaseModule --> Recording : manages
DatabaseModule --> RecordingJob : manages

' Notes
note right of User : Core user entity\nwith authentication
note right of RecordingSchedule : Recording configuration\nwith platform settings
note right of Recording : Actual recording file\nwith metadata
note right of RotationPolicy : File cleanup rules\nwith multiple strategies
note right of PlatformService : Handles platform strategies\nand configurations
note right of StreamlinkService : Manages actual recording\nprocesses
note right of SchedulerService : Manages automated\nrecording schedules
note right of SystemConfig : System-wide configuration\nstorage

@enduml
